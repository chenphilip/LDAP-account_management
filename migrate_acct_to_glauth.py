#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
  Build GLauth account list based on Linux OS passwd file
"""
__author__ = "Philip Chen"
__license__ = "https://opensource.org/licenses/GPL-3.0 GPL-3.0 License"
__date__ = "2019.06.01"
__version__ = "1.0.0"
__status__ = "Tested on Python 2.7.5"

import csv
import datetime
import hashlib

try:
    # loop through and create user list
    acct_list = []

    with open("passwd", 'r') as acct_list_csv:
        PASSWD_FIELDS = ('user_name',
                         'password',
                         'uid_number',
                         'gid_number',
                         'description',
                         'home_dir',
                         'shell')
        accounts = csv.DictReader(acct_list_csv, fieldnames=PASSWD_FIELDS, delimiter=':')
        for row in accounts:
            login_id = row['user_name']
            posix_uid = row['uid_number']
            home_dir = row['home_dir']
            if home_dir.startswith("/home/gis/"):
                one_account = {'login_id': login_id,
                               'uid_number': posix_uid,
                               'firstname': "",
                               'lastname': "",
                               'email': "",
                               'password': ""}
                acct_list.append(one_account)

    number_of_acct = len(acct_list)
    print(number_of_acct)

    with open("users.dat", 'r') as user_list_csv:
        CSV_FIELDS = ('a_number',
                      'firstname',
                      'lastname',
                      'course',
                      'course_crn',
                      'internal_email',
                      'external_email',
                      'secret_code')
        users = csv.DictReader(user_list_csv, fieldnames=CSV_FIELDS)
        for user in users:
            a_number = user['a_number'].lower()
            first_name = user['firstname']
            last_name = user['lastname']
            email_addr = user['internal_email']

            # print(a_number, first_name, last_name, email_addr)
            for one_account in acct_list:
                if one_account['login_id'] == a_number:
                    one_account['firstname'] = first_name
                    one_account['lastname'] = last_name
                    one_account['email'] = email_addr
                    email_str_length = len(email_addr)
                    if email_str_length > 12:
                        email_id = email_addr.split('@')[0]
                        one_account['login_id'] = email_id
                    one_account['password'] = pwgen()
                    print(one_account)

    # Generate glauth user data
    # Read the output file in overwrite mode
    timestamp = datetime.datetime.now()

    glauth_file = open("glauth.list", 'w')
    glauth_file.write("# [ {} ] \n".format(timestamp.strftime("%A %Y-%m-%d %H:%M")))
    glauth_file.write("# auto-generated by migrate_acct_to_glauth.py \n")

    for one_account in acct_list:
        if len(one_account['lastname']) > 1:
            glauth_file.write("[[users]]\n")
            glauth_file.write("  name = \"{}\"\n".format(one_account['login_id']))
            glauth_file.write("  givenname = \"{}\"\n".format(one_account['firstname']))
            glauth_file.write("  sn = \"{}\"\n".format(one_account['lastname']))
            glauth_file.write("  unixid = {}\n".format(one_account['uid_number']))
            glauth_file.write("  primarygroup = 2000\n")
            glauth_file.write("  loginShell = \"/bin/bash\"\n")
            glauth_file.write("  homeDir = \"/home/gis/{}\"\n".format(one_account['login_id']))
            glauth_file.write("  passsha256 = \"{}\"\n\n".format(hashlib.sha256(one_account['password'].encode('utf-8')).hexdigest()))

    glauth_file.write("\n# Total {} accounts created\n".format(number_of_acct))
    glauth_file.close()

except Exception as ex:
    # Just print(ex) is cleaner and more likely what you want
    print(ex)
